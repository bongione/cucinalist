// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/__generated__/prismaClient"
  previewFeatures = ["typedSql"]
  binaryTargets   = ["darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  // Prod change url      = env("DATABASE_URL")
  url      = "file:./dev.db"
}

model Context {
  id              String  @id
  parentContextId String?

  parentContext   Context?  @relation("ParentContext", fields: [parentContextId], references: [id])
  chilrenContexts Context[] @relation("ParentContext")

  namedEntities NamedEntity[]
}

enum EntityType {
  Recipe
  StoreBoughtIngredient
  CookingTechnique
  UnitOfMeasure
  Meal
}

model NamedEntity {
  contextId  String
  id         String
  recordType EntityType
  recordId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  context Context @relation(fields: [contextId], references: [id], onDelete: Cascade)

  @@id([contextId, id])
  @@index([recordId, recordType], name: "ixNamedEntityRecord")
}

model Recipe {
  id          String   @id @default(cuid())
  gblId       String
  name        String
  description String?
  serves      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ingredients   RecipeIngredient[] @relation("ingredients")
  usedInRecipes RecipeIngredient[] @relation("producedByRecipe")
  steps         CookingStep[]
  inCourses     CourseRecipe[]

  @@index([gblId], name: "ixRecipeGblId")
}

model RecipeIngredient {
  id                      String  @id @default(cuid())
  recipeId                String
  sequence                Int
  storeBoughtIngredientId String?
  producedByRecipeId      String?
  amount                  Float
  unitOfMeasureId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe                Recipe                 @relation(fields: [recipeId], references: [id], name: "ingredients", onDelete: Cascade)
  storeBoughtIngredient StoreBoughtIngredient? @relation(fields: [storeBoughtIngredientId], references: [id])
  producedByRecipe      Recipe?                @relation(fields: [producedByRecipeId], references: [id], name: "producedByRecipe")
  unitOfMeasure         UnitOfMeasure          @relation(fields: [unitOfMeasureId], references: [id])

  usedAsInput        StepInputIngredient[]
  stepPreconditionOf StepPreconditionIngredient[]
}

model CookingStep {
  id              String   @id @default(cuid())
  recipeId        String
  sequence        Int
  techniqueId     String
  activeMinutes   Int?
  parallelMinutes Int?
  keepEyeMinutes  Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  recipe            Recipe                 @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  cookingTechnique  CookingTechnique       @relation(fields: [techniqueId], references: [id])
  inputIngredients  StepInputIngredient[]
  outputIngredients StepOutputIngredient[]
  preconditions     StepPrecondition[]
}

enum MeasuringFeature {
  unspecified
  weight
  volume
  count
  length
  portion
}

model UnitOfMeasure {
  id            String           @id @default(cuid())
  gblId         String
  name          String
  measuring     MeasuringFeature
  defaultSymbol String?
  plural        String?
  ontologyUrl   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  synonyms                  UnitOfMeasureAcceptedLabel[]
  mesuringRecipeIngredients RecipeIngredient[]

  @@index([gblId], name: "ixUnitOFMeasureGblId")
}

model UnitOfMeasureAcceptedLabel {
  id              String        @id @default(cuid())
  unitOfMeasureId String
  label           String
  unitOfMeasure   UnitOfMeasure @relation(fields: [unitOfMeasureId], references: [id], onDelete: Cascade)

  @@index([unitOfMeasureId], name: "ixUnitOfMeasureAcceptedLabel")
}

model CookingTechnique {
  id                 String        @id @default(cuid())
  gblId              String
  name               String
  description        String?
  inputPrefixesOrder String?
  outputFormatString String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  ontologyUrl        String?
  usedInSteps        CookingStep[]

  @@index([gblId], name: "ixCookingTechniqueGblId")
}

model StoreBoughtIngredient {
  id          String  @id @default(cuid())
  gblId       String
  name        String
  measuredAs  String
  plural      String?
  description String?
  ontologyUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inRecipes RecipeIngredient[]
  aka       StoreBoughtIngredientSynonym[]

  @@index([gblId], name: "ixStoreBoughtIngredientGblId")
}

model StoreBoughtIngredientSynonym {
  id                      String @id @default(cuid())
  storeBoughtIngredientId String
  synonym                 String

  storeBoughtIngredient StoreBoughtIngredient @relation(fields: [storeBoughtIngredientId], references: [id], onDelete: Cascade)
}

model StepInputIngredient {
  id                 String  @id @default(cuid())
  cookingStepId      String
  sequence           Int
  prefix             String?
  portionOf          Float?
  outputIngredientId String?
  recipeIngredientId String?

  cookingStep      CookingStep           @relation(fields: [cookingStepId], references: [id], onDelete: Cascade)
  outputIngredient StepOutputIngredient? @relation(fields: [outputIngredientId], references: [id])
  recipeIngredient RecipeIngredient?     @relation(fields: [recipeIngredientId], references: [id])
}

model StepOutputIngredient {
  id            String @id @default(cuid())
  cookingStepId String
  sequence      Int
  name          String

  cookingStep                  CookingStep                  @relation(fields: [cookingStepId], references: [id], onDelete: Cascade)
  usedAsInput                  StepInputIngredient[]
  stepPreconditionIngredientOf StepPreconditionIngredient[]
}

model StepPrecondition {
  id            String @id @default(cuid())
  cookingStepId String
  sequence      Int
  description   String

  cookingStep      CookingStep                  @relation(fields: [cookingStepId], references: [id], onDelete: Cascade)
  inputIngredients StepPreconditionIngredient[]
}

model StepPreconditionIngredient {
  id                 String  @id @default(cuid())
  sequence           Int
  stepPreconditionId String
  recipeIngredientId String?
  outputIngredientId String?

  stepPrecondition StepPrecondition      @relation(fields: [stepPreconditionId], references: [id], onDelete: Cascade)
  outputIngredient StepOutputIngredient? @relation(fields: [outputIngredientId], references: [id])
  recipeIngredient RecipeIngredient?     @relation(fields: [recipeIngredientId], references: [id])
}

model Meal {
  id          String   @id @default(cuid())
  gblId       String?
  name        String?
  description String?
  nDiners     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses MealCourse[]

  @@index([gblId], name: "ixMealGblId")
}

model MealCourse {
  id        String   @id @default(cuid())
  mealId    String
  sequence  Int
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meal    Meal           @relation(fields: [mealId], references: [id], onDelete: Cascade)
  recipes CourseRecipe[]
}

model CourseRecipe {
  id        String   @id @default(cuid())
  courseId  String
  recipeId  String
  sequence  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course MealCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)
  recipe Recipe     @relation(fields: [recipeId], references: [id])
}
