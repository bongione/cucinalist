/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n      mutation executeDML($dsl: String!) {\n        mergeFacts(cucinalistDsl: $dsl) {\n          success\n          message\n          mergedElements {\n            ... on Recipe {\n              id\n              name\n              serves\n              ingredients {\n                unit {\n                  id\n                  name\n                  synonyms\n                }\n                quantity\n                ingredient {\n                  __typename\n                  ... on BoughtIngredient {\n                    id\n                    name\n                  }\n                  ... on Recipe {\n                    id\n                    name\n                  }\n                }\n              }\n              steps {\n                activeMinutes\n                inactiveMinutes\n                semiActiveMinutes\n                process {\n                  id\n                  name\n                }\n                requires {\n                  portionOf\n                  ingredient {\n                    ... on RecipeIngredient {\n                      id\n                      quantity\n                      unit {\n                        id\n                        name\n                      }\n                      ingredient {\n                        ... on BoughtIngredient {\n                          id\n                          name\n                        }\n                        ... on Recipe {\n                          id\n                          name\n                        }\n                      }\n                    }\n                    ... on StepOutputIngredient {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    ": typeof types.ExecuteDmlDocument,
};
const documents: Documents = {
    "\n      mutation executeDML($dsl: String!) {\n        mergeFacts(cucinalistDsl: $dsl) {\n          success\n          message\n          mergedElements {\n            ... on Recipe {\n              id\n              name\n              serves\n              ingredients {\n                unit {\n                  id\n                  name\n                  synonyms\n                }\n                quantity\n                ingredient {\n                  __typename\n                  ... on BoughtIngredient {\n                    id\n                    name\n                  }\n                  ... on Recipe {\n                    id\n                    name\n                  }\n                }\n              }\n              steps {\n                activeMinutes\n                inactiveMinutes\n                semiActiveMinutes\n                process {\n                  id\n                  name\n                }\n                requires {\n                  portionOf\n                  ingredient {\n                    ... on RecipeIngredient {\n                      id\n                      quantity\n                      unit {\n                        id\n                        name\n                      }\n                      ingredient {\n                        ... on BoughtIngredient {\n                          id\n                          name\n                        }\n                        ... on Recipe {\n                          id\n                          name\n                        }\n                      }\n                    }\n                    ... on StepOutputIngredient {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    ": types.ExecuteDmlDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation executeDML($dsl: String!) {\n        mergeFacts(cucinalistDsl: $dsl) {\n          success\n          message\n          mergedElements {\n            ... on Recipe {\n              id\n              name\n              serves\n              ingredients {\n                unit {\n                  id\n                  name\n                  synonyms\n                }\n                quantity\n                ingredient {\n                  __typename\n                  ... on BoughtIngredient {\n                    id\n                    name\n                  }\n                  ... on Recipe {\n                    id\n                    name\n                  }\n                }\n              }\n              steps {\n                activeMinutes\n                inactiveMinutes\n                semiActiveMinutes\n                process {\n                  id\n                  name\n                }\n                requires {\n                  portionOf\n                  ingredient {\n                    ... on RecipeIngredient {\n                      id\n                      quantity\n                      unit {\n                        id\n                        name\n                      }\n                      ingredient {\n                        ... on BoughtIngredient {\n                          id\n                          name\n                        }\n                        ... on Recipe {\n                          id\n                          name\n                        }\n                      }\n                    }\n                    ... on StepOutputIngredient {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation executeDML($dsl: String!) {\n        mergeFacts(cucinalistDsl: $dsl) {\n          success\n          message\n          mergedElements {\n            ... on Recipe {\n              id\n              name\n              serves\n              ingredients {\n                unit {\n                  id\n                  name\n                  synonyms\n                }\n                quantity\n                ingredient {\n                  __typename\n                  ... on BoughtIngredient {\n                    id\n                    name\n                  }\n                  ... on Recipe {\n                    id\n                    name\n                  }\n                }\n              }\n              steps {\n                activeMinutes\n                inactiveMinutes\n                semiActiveMinutes\n                process {\n                  id\n                  name\n                }\n                requires {\n                  portionOf\n                  ingredient {\n                    ... on RecipeIngredient {\n                      id\n                      quantity\n                      unit {\n                        id\n                        name\n                      }\n                      ingredient {\n                        ... on BoughtIngredient {\n                          id\n                          name\n                        }\n                        ... on Recipe {\n                          id\n                          name\n                        }\n                      }\n                    }\n                    ... on StepOutputIngredient {\n                      id\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;